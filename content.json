[{"title":"Python 学习笔记","date":"2017-07-05T16:00:00.000Z","path":"post/Notes-on-Python-Learning/","raw":"---\nlayout: post\ntitle: Python 学习笔记\ndate: 2017-07-06\ncategories: Coding\ntags: [Python, Coding, Notes, Studying, Summary]\ndescription: A note on Python learning.\n---\n\n\n## Python 初探\n### The Zen of Python\n\n```python\n>>> import this\nThe Zen of Python, by Tim Peters\n\nBeautiful is better than ugly.\nExplicit is better than implicit.\nSimple is better than complex.\nComplex is better than complicated.\nFlat is better than nested.\nSparse is better than dense.\nReadability counts.\nSpecial cases aren't special enough to break the rules.\nAlthough practicality beats purity.\nErrors should never pass silently.\nUnless explicitly silenced.\nIn the face of ambiguity, refuse the temptation to guess.\nThere should be one-- and preferably only one --obvious way to do it.\nAlthough that way may not be obvious at first unless you're Dutch.\nNow is better than never.\nAlthough never is often better than *right* now.\nIf the implementation is hard to explain, it's a bad idea.\nIf the implementation is easy to explain, it may be a good idea.\nNamespaces are one honking great idea -- let's do more of those!\n```\n\n\n## Python 基本元素\n### Python 基本类型\n\n布尔型: `class 'bool'`, 仅包含 True, False 两个值\n整型:  `<class 'int'>`\n浮点型: `<class 'float'>`\n字符串型: `<class 'str'>`\n\n使用 `type(x)` 可以查看 `x` 的类型.\n\n### 变量, 名字和对象\nPython 是强类型的, 永远无法修改一个已有对象的类型, 即使它包含的值是可变的. 但可以给一个变量赋不同于其值的类型的值. 举个例子, 以下代码在 Python 中是合法的.\n\n```python\n>>> a=123\n>>> a\n123\n>>> a='abc'\n>>> as\n'abc'\n```\n\nPython 中变量名命名规则\n1. 只能包含以下字符: `[a-zA-Z0-9_]`;\n2. 不允许以数字开头;\n3. 以下划线开头的名字有特殊含义.\n\nPython 中的保留字\n\n```python\nFalse       class       finally     is          return\nNone        continue    for         lambda      try\nTrue        def         from        nonlocal    while\nand         del         global      not         with\nas          elif        if          or          yield\nassert      else        import      pass\nbreak       except      in          raise\n```\n\n### 数字\n\nPython 中支持的数学运算符如下:\n\n```python\n+       # 加法\n-       # 减法\n*       # 乘法\n/       # 浮点数除法 (转换为浮点数相除, 并得到浮点数结果)\n//      # 整数除法 (返回商)\n%       # 模 (返回余数)\n**      # 幂 (这个比较奇葩)\n```\n\n#### 基数\n\n在 Python 中, 除十进制外还可以使用其他三种进制的数字:\n- `0b` 或 `0B` 代表二进制\n- `0o` 或 `0O` 代表八进制\n- `0x` 或 `0X` 代表十六进制\n\n#### 类型转换\n\n使用 `int()` 函数可以将布尔型, 整型, 或者浮点数, 或者由数字组成的字符串, 转换为整数. 对于浮点数返回其整数部分.\n\n```python\n>>> int(True)\n1\n>>> int(False)\n0\n>>> int('99')\n99\n>>> int('-23')\n23\n>>> int('+12')\n12\n>>> int(98.6)\n98\n>>> int(1.0e4)\n10000\n>>> int('98.6')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: '98.6'\n>>> int('1.0e4')\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\nValueError: invalid literal for int() with base 10: '1.0e4'\n```\n\n\nTips: Mac 终端中 Python 交互界面下的清屏快捷键是 `Command+K`, 比其他系统下方便多了.\n\nTips: Python 3 中 int 类型可以存储 **任意大小** 的整数.\n\n\n#### 浮点数\n\n使用 `float()` 函数可以将布尔型, 整型, 或包含有效整数或有效浮点数的字符串转换为浮点型.\n\n```python\n>>> float(True)\n1.0\n>>> float(False)\n0.0\n>>> float(98)\n98.0\n>>> float('99')\n99.0\n>>> float('98.6')\n98.6\n>>> float('-1.5')\n-1.5\n>>> float('1.0e4')\n10000.0\n>>>\n```\n\n\n### 字符串\n\nTips: 对 Unicode 的支持使得 Python 3 可以包含世界上任何书面语言以及许多特殊符号。\n\n\n#### 使用引号创建字符串\n\n在 Python 中可以使用一对 `'`, `\"`, `'''`, `\"\"\"` 来创建字符串.\n三元引号中的换行符无需转义, 多用于创建多行字符串.\n在三元引号包裹的字符串中, 每行的换行符以及行首或行末的空格都会被保留.\n举个例子:\n\n```python\n>>> s = '''a\n... b\n... c\n... d'''\n>>> s\n'a\\nb\\nc\\nd'\n>>> print(s)\na\nb\nc\nd\n```\n\nWarning: 三元引号包裹的字符串并不是原样输出, 只是换行符无需转义, 但转义仍然是起作用的.\n\nTips: 在引号中不包含任何字符即可以创建一个空串.\n\n\n#### 使用 `str()` 进行类型转换\n\n使用 str() 可以将其他 Python 数据类型转换为字符串:\n\n```python\n>>> str(98.6)\n'98.6'\n>>> str(1.0e4)\n'10000.0'\n>>> str(True)\n'True'\n```\n\n当调用 print() 函数或者进行字符串差值(string interpolation)时，Python 内部会自动 使用 str() 将非字符串对象转换为字符串。\n\n#### 使用 `\\` 转义\n\n换行符: `\\n`\n制表符: `\\t`\n\n#### 使用 `+` 拼接字符串\n\n在 Python 中，可以使用 `+` 将多个字符串或字符串变量拼接起来:\n\n```python\n>>> 'Release the kraken! ' + 'At once!'\n'Release the kraken! At once!'\n```\n\n#### 使用 `*` 复制字符串\n\n```python\n>>> test = 'ha' * 4 + 'wa' * 3\n>>> test\n'hahahahawawawa'\n```\n\n#### 使用 `[]` 提取字符\n\n使用 `string[index]` 可以提取字符串 `string` 中 `index` 位置的单个字符. 注意: 0 表示第一个字符, 1 表示第二个字符, ...  -1 表示最后一个字符.\n\n```python\n>>> letters = 'abcdefghijklmnopqrstuvwxyz'\n>>> letters[0]\n'a'\n>>> letters[1]\n'b'\n>>> letters[-1]\n'z'\n>>> letters[-2]\n'y'\n```\n\nTips: 位置索引在其他序列类型, 如列表和元组中的用法也是这样.\n\nWarning: 字符串是不可变的, 无法通过给 `string[index]` 赋值的方式改变字符串的值.\n\n\nupdate-date: Jul 6, 2017\n","tags":[{"name":"Python","slug":"python","permalink":"/tags/python/"},{"name":"Coding","slug":"coding","permalink":"/tags/coding/"},{"name":"Notes","slug":"notes","permalink":"/tags/notes/"},{"name":"Studying","slug":"studying","permalink":"/tags/studying/"},{"name":"Summary","slug":"summary","permalink":"/tags/summary/"}]},{"title":"Notes on Shell Scripting","date":"2017-05-23T16:00:00.000Z","path":"post/Notes-on-Shell-Scripting/","raw":"---\nlayout: post\ntitle: Notes on Shell Scripting\ndate: 2017-05-24\ncategories: Coding\ntags: [Shell, Coding, Linux, Notes, Summary]\ndescription: A short note on shell scripting.\n---\n\n\n\n## Shell 相关命令\n\n### Shell 文件管理命令\n\n```bash\ncd              # 切换目录\nls              # 列出文件(夹)\ncp              # 复制文件(夹)\nmv              # 移动/重命名文件(夹)\nrm              # 删除文件(夹)\npwd             # 显示当前目录\nmkdir           # 创建目录\nopen            # 打开文件\nsudo            # 以 root 账号执行命令\necho            # 打印输出\nprintf          # 格式化打印输出\n```\n\n\n### 帮助相关命令\n\n```bash\n-h              # 打开命令自带帮助\n--help          # 打开命令自带帮助\nman             # 打开 man 文档\ninfo            # 打开 info 文档\nhelp            # 等同于 --help\nwhich           # 显示脚本位置或函数定义或别名定义\nmandoc          # 以 pdf 格式查看 man 帮助文档\n```\n\n\n### 查看文件相关命令\n\n```bash\nopen            # 用默认应用打开文件或网址\nshow            # 快速预览文件, defined by me\nimg             # 在终端打开图片, need imgcat\ncat\nless\nmore\nhead\ntail\n```\n\n\n### 字符处理相关命令\n\n```bash\nsed\nawk\ngrep\nsort\nuniq\ncut\ntr\npaste\nsplit\n```\n\n\n### Shell 配置相关命令\n\n```bash\nhistory         # 打印输出历史命令\nalias           # 设定别名\nunalias         # 取消别名\nfunction        # 定义函数\nsource          # 读取并执行脚本, 简写为 .\n~/.profile      # shell 配置文件, 多个 shell 共用\n~/.bash_profile # bash 配置文件\n~/.zshrc        # zsh 配置文件\n```\n\n\n## Shell 相关程序\n\n### 安装软件相关程序\n\n```bash\nbrew            # macOS package manager\npip             # python package manager\nnpm             # nodejs package manager\ngem             # ruby package manager \n```\n\n\n### 一些非常有用的 Linux 程序\n\n```bash\ngit             # 版本管理, 配合 sourcetree 使用更方便\nmake            # 自动化编译, makefile for latex, markdown\npandoc          # 文档转换器, 支持 md, latex, html, pdf 等\nwget            # 用于下载\ncurl            # 用于下载\n```\n\n\n### 我写的一些函数/脚本\n\n```bash\nfy              # 中英翻译\nhelp            # 等价于 --help\nmakepdf         # 转换 tex/md/tm/wiki 等为 pdf\nmandoc          # 在预览中打开 man 文档\nshow/ql         # 预览文件, 等同于空格键\n```\n\n\n### 其他常用的一些命令\n\n```bash\ntexdoc          # 查看 LaTeX 帮助文档\nchmod a+x       # 设置可运行权限\nping            # 检查网络连接\ndu -sh          # 显示文件夹大小\nunzip           # 解压缩文件\nsay             # 朗读文字\npbcopy          # 复制到剪切板\npbpaste         # 读取剪切板\n```\n\n### 当你在程序中迷失了方向时, 请使用以下命令\n\n```bash\nwhoami          # 我是谁\nwhere           # 我在哪里\nwhatis          # = man -f\nwhereis         # = which -a\n```\n\n\n### oh-my-zsh macos 插件 OSX 提供的命令\n\n\n```bash\ntab             # 在一个新标签打开当前目录;\ncdf             # cd 到当前 Finder 打开的目录;\nitunes          # 命令行操作 iTunes;\nquick-look      # = show/ql, 快速查看文件, 类似于空格键;\nman-preview     # = mandoc, 在预览中打开 man 帮助文档.\n```\n\n\n\n## Shell 语法知识\n\n### Shell 通配符\n\n```bash\n?               # 匹配任意一个字符\n*               # 匹配任意 0 个或多个字符\n[list]          # 匹配 list 中的任意一个字符\n[!list]         # 匹配 list 之外的任意一个字符\n[c1-c2]         # 匹配 c1-c2 中的任意一个字符\n{s1,s2,...}     # 匹配 s1, s2 或 ... 中的一个字符串\n```\n\n\n### Shell 元字符\n\n```bash\n=               # 设定变量(注意等号两边不要有空格)\n;               # 按顺序执行命令\n&&              # 若前者返回 true, 则继续执行后续命令\n||              # 若前者返回 false, 则继续执行后续命令\n$()             # 命令替换\n${}             # 变量替换\n|               # 命令管道\n``              # 命令替换, 推荐使用 $()\n<               # 重定向 stdin\n>               # 重定向 stdout\n>>              # 追加到文件\n2>              # 重定向 stderr\n&>              # 重定向 strout 和 stderr\n```\n\n\n### Shell 转义符\n\n```bash\n''              # 硬转义, 关闭所有的元字符, 通配符\n\"\"              # 软转义, 只允许 $ 和 ` 做变量和命令替换\n\\               # 转义, 转义其后的通配符和元字符\n```\n\n\n### Shell 脚本中的变量\n\n```bash\n$#              # 传递给函数的参数个数\n$*              # \"$*\"=\"$1c$2c$3c...\", 是一个字符串, 其中 c 表示 ${IFS} 的第一个字符\n$@              # \"$@\"=$@=$*=\"$1\" \"$2\" \"$3\" ..., 是多个字符串\n$n              # 传递给函数的第 n 个参数\n$?              # 显示最后命令的退出状态, 0 表示没有错误\n```\n\n\n### 终端中的变量\n\n```bash\n!!              # 上一条命令\n!*              # 上一条命令的所有参数\n!^              # 上一条命令的第一个参数\n!$              # 上一条命令的最后一个参数\n!:-             # 上一条命令中除了最后一个参数的部分\n!!:gs/1/2       # 将上一条命令中的 1 替换为 2\n```\n\n\n### 控制流\n\n```bash\nif\nelif\nelse\ncase\nfor\nwhile\nuntil\ntest\n```\n\n\n\n","tags":[{"name":"Coding","slug":"coding","permalink":"/tags/coding/"},{"name":"Notes","slug":"notes","permalink":"/tags/notes/"},{"name":"Summary","slug":"summary","permalink":"/tags/summary/"},{"name":"Shell","slug":"shell","permalink":"/tags/shell/"},{"name":"Linux","slug":"linux","permalink":"/tags/linux/"}]}]