<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Python 学习笔记]]></title>
    <url>%2Fpost%2FNotes-on-Python-Learning%2F</url>
    <content type="text"><![CDATA[Python 初探The Zen of Python&gt;&gt;&gt; import thisThe Zen of Python, by Tim PetersBeautiful is better than ugly.Explicit is better than implicit.Simple is better than complex.Complex is better than complicated.Flat is better than nested.Sparse is better than dense.Readability counts.Special cases aren't special enough to break the rules.Although practicality beats purity.Errors should never pass silently.Unless explicitly silenced.In the face of ambiguity, refuse the temptation to guess.There should be one-- and preferably only one --obvious way to do it.Although that way may not be obvious at first unless you're Dutch.Now is better than never.Although never is often better than *right* now.If the implementation is hard to explain, it's a bad idea.If the implementation is easy to explain, it may be a good idea.Namespaces are one honking great idea -- let's do more of those! Python 基本元素Python 基本类型布尔型: class &#39;bool&#39;, 仅包含 True, False 两个值整型: &lt;class &#39;int&#39;&gt;浮点型: &lt;class &#39;float&#39;&gt;字符串型: &lt;class &#39;str&#39;&gt; Tips: 使用 type(x) 可以查看 x 的类型. 变量, 名字和对象Python 是强类型的, 永远无法修改一个已有对象的类型, 即使它包含的值是可变的. 但可以给一个变量赋不同于其值的类型的值. 举个例子, 以下代码在 Python 中是合法的. &gt;&gt;&gt; a=123&gt;&gt;&gt; a123&gt;&gt;&gt; a='abc'&gt;&gt;&gt; a'abc' Python 中变量名命名规则 只能包含以下字符: [a-zA-Z0-9_]; 不允许以数字开头; 以下划线开头的名字有特殊含义. Python 中的保留字 True class finally is returnFalse continue for lambda tryNone def from nonlocal whileand del global not withas elif if or yieldassert else import passbreak except in raise 数字Python 中支持的数学运算符如下: + # 加法- # 减法* # 乘法/ # 浮点数除法 (转换为浮点数相除, 并得到浮点数结果)// # 整数除法 (返回商)% # 模 (返回余数)** # 幂 (这个比较奇葩, 咋不用 ^ 呢) 基数在 Python 中, 除十进制外还可以使用其他三种进制的数字: 0b 或 0B 代表二进制 0o 或 0O 代表八进制 0x 或 0X 代表十六进制 类型转换使用 int() 函数可以将布尔型, 整型, 或者浮点数, 或者由数字组成的字符串转换为整数. 对于浮点数返回其整数部分. &gt;&gt;&gt; int(True)1&gt;&gt;&gt; int(False)0&gt;&gt;&gt; int('99')99&gt;&gt;&gt; int('-23')23&gt;&gt;&gt; int('+12')12&gt;&gt;&gt; int(98.6)98&gt;&gt;&gt; int(1.0e4)10000&gt;&gt;&gt; int('98.6')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;ValueError: invalid literal for int() with base 10: '98.6'&gt;&gt;&gt; int('1.0e4')Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt;ValueError: invalid literal for int() with base 10: '1.0e4' Tips: Mac 终端中 Python 交互界面下的清屏快捷键是 Command+K, 比其他系统下方便多了. Tips: Python 3 中 int 类型可以存储 任意大小 的整数. 浮点数使用 float() 函数可以将布尔型, 整型, 或包含有效整数或有效浮点数的字符串转换为浮点型. &gt;&gt;&gt; float(True)1.0&gt;&gt;&gt; float(False)0.0&gt;&gt;&gt; float(98)98.0&gt;&gt;&gt; float('99')99.0&gt;&gt;&gt; float('98.6')98.6&gt;&gt;&gt; float('-1.5')-1.5&gt;&gt;&gt; float('1.0e4')10000.0&gt;&gt;&gt; 字符串Tips: 对 Unicode 的支持使得 Python 3 可以包含世界上任何书面语言以及许多特殊符号。 使用引号创建字符串在 Python 中可以使用一对 &#39;, &quot;, &#39;&#39;&#39;, &quot;&quot;&quot; 来创建字符串.三元引号中的换行符无需转义, 多用于创建多行字符串.在三元引号包裹的字符串中, 每行的换行符以及行首或行末的空格都会被保留.举个例子: &gt;&gt;&gt; s = '''a... b... c... d'''&gt;&gt;&gt; s'a\nb\nc\nd'&gt;&gt;&gt; print(s)abcd Warning: 三元引号包裹的字符串并不是原样输出, 只是换行符无需转义, 但转义仍然是起作用的. Tips: 在引号中不包含任何字符即可以创建一个空串. 使用 str() 进行类型转换使用 str() 函数可以将其他 Python 数据类型转换为字符串: &gt;&gt;&gt; str(98.6)'98.6'&gt;&gt;&gt; str(1.0e4)'10000.0'&gt;&gt;&gt; str(True)'True' 当调用 print() 函数或者进行字符串差值(string interpolation)时，Python 内部会自动 使用 str() 将非字符串对象转换为字符串。 使用 \ 转义换行符: \n制表符: \t 使用 + 拼接字符串在 Python 中，可以使用 + 将多个字符串或字符串变量拼接起来: &gt;&gt;&gt; 'Release the kraken! ' + 'At once!''Release the kraken! At once!' 使用 * 复制字符串&gt;&gt;&gt; test = 'ha' * 4 + 'wa' * 3&gt;&gt;&gt; test'hahahahawawawa' 使用 [] 提取字符使用 string[index] 可以提取字符串 string 中 index 位置的单个字符. 注意: 0 表示第一个字符, 1 表示第二个字符, … -1 表示最后一个字符. &gt;&gt;&gt; letters = 'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt; letters[0]'a'&gt;&gt;&gt; letters[1]'b'&gt;&gt;&gt; letters[-1]'z'&gt;&gt;&gt; letters[-2]'y' Tips: 位置索引在其他序列类型, 如列表和元组中的用法也是这样. Warning: 字符串是不可变的, 无法通过给 string[index] 赋值的方式改变字符串的值. 使用切片 [start:end:step] 提取字符串切片操作 (slice) 可以从一个字符串中提取子字符串. [start:end:step] 称为一个切片, 切片得到的子串包含从 start 到 end 之前的间隔为 step 的全部字符. 三个参数的值都是可以省略的, 如果省略 start 默认从开头提取; 省略 end 默认提取到结尾; 省略 step 默认步长为 1.常用的切片操作及其含义如下: [:] 提取从开头到结尾的整个字符串. [start:] 提取从 start 到结尾的字符串. [:end] 提取从开头到 end-1 的字符串. [start:end] 提取从 start 到 end-1 的字符串. [start:end:step] 提取从 start 到 end-1 间隔为 step 的字符串. [::step] 提取从开头到结尾, 步长为 step 的字符串 &gt;&gt;&gt; letters = 'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt; letters[:]'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt; letters[7:]'hijklmnopqrstuvwxyz'&gt;&gt;&gt; letters[:-3]'abcdefghijklmnopqrstuvw'&gt;&gt;&gt; letters[7:-3]'hijklmnopqrstuvw'&gt;&gt;&gt; letters[::2]'acegikmoqsuwy'&gt;&gt;&gt; letters[7:-3:2]'hjlnprtv'&gt;&gt;&gt; letters[7::2]'hjlnprtvxz'&gt;&gt;&gt; letters[:20:2]'acegikmoqs' Tips: 如果步长为负数, 则从右到左反向进行提取操作. &gt;&gt;&gt; letters[-1::-1]'zyxwvutsrqponmlkjihgfedcba'&gt;&gt;&gt; letters[::-1]'zyxwvutsrqponmlkjihgfedcba'&gt;&gt;&gt; letters[0::-1]'a' Tips: 切片操作对于无效偏移量的容忍程度远大于单字符串提取. ~在切片中, 小于起始位置的偏移量会被当做起始位置, 大于终止位置的偏移量会被当做终止位置.~ 如果在切片对应的索引位置不存在字符, 也不会报错, 而是返回空字符串. &gt;&gt;&gt; letters[-50:]'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt; letters[-50:-40]''&gt;&gt;&gt; letters[:70]'abcdefghijklmnopqrstuvwxyz'&gt;&gt;&gt; letters[60:70]'' update-date: Jul 6, 2017]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Coding</tag>
        <tag>Notes</tag>
        <tag>Summary</tag>
        <tag>Python</tag>
        <tag>Studying</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Notes on Shell Scripting]]></title>
    <url>%2Fpost%2FNotes-on-Shell-Scripting%2F</url>
    <content type="text"><![CDATA[Shell 相关命令Shell 文件管理命令cd # 切换目录ls # 列出文件(夹)cp # 复制文件(夹)mv # 移动/重命名文件(夹)rm # 删除文件(夹)pwd # 显示当前目录mkdir # 创建目录open # 打开文件sudo # 以 root 账号执行命令echo # 打印输出printf # 格式化打印输出 帮助相关命令-h # 打开命令自带帮助--help # 打开命令自带帮助man # 打开 man 文档info # 打开 info 文档help # 等同于 --helpwhich # 显示脚本位置或函数定义或别名定义mandoc # 以 pdf 格式查看 man 帮助文档 查看文件相关命令open # 用默认应用打开文件或网址show # 快速预览文件, defined by meimg # 在终端打开图片, need imgcatcatlessmoreheadtail 字符处理相关命令sedawkgrepsortuniqcuttrpastesplit Shell 配置相关命令history # 打印输出历史命令alias # 设定别名unalias # 取消别名function # 定义函数source # 读取并执行脚本, 简写为 .~/.profile # shell 配置文件, 多个 shell 共用~/.bash_profile # bash 配置文件~/.zshrc # zsh 配置文件 Shell 相关程序安装软件相关程序brew # macOS package managerpip # python package managernpm # nodejs package managergem # ruby package manager 一些非常有用的 Linux 程序git # 版本管理, 配合 sourcetree 使用更方便make # 自动化编译, makefile for latex, markdownpandoc # 文档转换器, 支持 md, latex, html, pdf 等wget # 用于下载curl # 用于下载 我写的一些函数/脚本fy # 中英翻译help # 等价于 --helpmakepdf # 转换 tex/md/tm/wiki 等为 pdfmandoc # 在预览中打开 man 文档show/ql # 预览文件, 等同于空格键 其他常用的一些命令texdoc # 查看 LaTeX 帮助文档chmod a+x # 设置可运行权限ping # 检查网络连接du -sh # 显示文件夹大小unzip # 解压缩文件say # 朗读文字pbcopy # 复制到剪切板pbpaste # 读取剪切板 当你在程序中迷失了方向时, 请使用以下命令whoami # 我是谁where # 我在哪里whatis # = man -fwhereis # = which -a oh-my-zsh macos 插件 OSX 提供的命令tab # 在一个新标签打开当前目录;cdf # cd 到当前 Finder 打开的目录;itunes # 命令行操作 iTunes;quick-look # = show/ql, 快速查看文件, 类似于空格键;man-preview # = mandoc, 在预览中打开 man 帮助文档. Shell 语法知识Shell 通配符? # 匹配任意一个字符* # 匹配任意 0 个或多个字符[list] # 匹配 list 中的任意一个字符[!list] # 匹配 list 之外的任意一个字符[c1-c2] # 匹配 c1-c2 中的任意一个字符&#123;s1,s2,...&#125; # 匹配 s1, s2 或 ... 中的一个字符串 Shell 元字符= # 设定变量(注意等号两边不要有空格); # 按顺序执行命令&amp;&amp; # 若前者返回 true, 则继续执行后续命令|| # 若前者返回 false, 则继续执行后续命令$() # 命令替换$&#123;&#125; # 变量替换| # 命令管道`` # 命令替换, 推荐使用 $()&lt; # 重定向 stdin&gt; # 重定向 stdout&gt;&gt; # 追加到文件2&gt; # 重定向 stderr&amp;&gt; # 重定向 strout 和 stderr Shell 转义符'' # 硬转义, 关闭所有的元字符, 通配符"" # 软转义, 只允许 $ 和 ` 做变量和命令替换\ # 转义, 转义其后的通配符和元字符 Shell 脚本中的变量$# # 传递给函数的参数个数$* # "$*"="$1c$2c$3c...", 是一个字符串, 其中 c 表示 $&#123;IFS&#125; 的第一个字符$@ # "$@"=$@=$*="$1" "$2" "$3" ..., 是多个字符串$n # 传递给函数的第 n 个参数$? # 显示最后命令的退出状态, 0 表示没有错误 终端中的变量!! # 上一条命令!* # 上一条命令的所有参数!^ # 上一条命令的第一个参数!$ # 上一条命令的最后一个参数!:- # 上一条命令中除了最后一个参数的部分!!:gs/1/2 # 将上一条命令中的 1 替换为 2 控制流ifelifelsecaseforwhileuntiltest]]></content>
      <categories>
        <category>Coding</category>
      </categories>
      <tags>
        <tag>Shell</tag>
        <tag>Coding</tag>
        <tag>Linux</tag>
        <tag>Notes</tag>
        <tag>Summary</tag>
      </tags>
  </entry>
</search>